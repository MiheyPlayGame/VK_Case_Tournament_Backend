"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
"""
import sys
import json
from pathlib import Path
sys.stdout.reconfigure(encoding='utf-8')

from app.database import SessionLocal, engine
from app.models.app import App
from app.models.category import Category
from app.models.screenshot import Screenshot
from app.database import Base
from app.utils.hash_utils import HashUtils

def load_categories_from_json():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    data_dir = Path(__file__).parent.parent / "data"
    categories_file = data_dir / "categories.json"
    
    try:
        with open(categories_file, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        print(f"‚ö†Ô∏è –§–∞–π–ª {categories_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return []

def create_categories():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    categories_data = load_categories_from_json()
    
    db = SessionLocal()
    try:
        for cat_data in categories_data:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ö–µ—à–∞
            category = Category(**cat_data)
            category_dict = HashUtils.get_data_for_hash(category)
            expected_hash = HashUtils.calculate_category_hash(category_dict)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º —Ö–µ—à–µ–º
            existing_by_hash = db.query(Category).filter(Category.data_hash == expected_hash).first()
            if existing_by_hash:
                print(f"   ‚ö†Ô∏è  –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{cat_data['name']}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º)")
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º, –Ω–æ —Å –¥—Ä—É–≥–∏–º —Ö–µ—à–µ–º
                existing_by_name = db.query(Category).filter(Category.name == cat_data["name"]).first()
                if existing_by_name:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                    existing_by_name.description = cat_data["description"]
                    existing_by_name.tag = cat_data["tag"]
                    existing_by_name.tag_color = cat_data["tag_color"]
                    existing_by_name.data_hash = expected_hash
                    print(f"   üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {cat_data['name']}")
                else:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                    category.data_hash = expected_hash  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ö–µ—à –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
                    db.add(category)
                    db.flush()  # –ü–æ–ª—É—á–∞–µ–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                    print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {cat_data['name']}")
        
        db.commit()
        print("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
        db.rollback()
    finally:
        db.close()

def load_apps_from_json():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –∏–∑ JSON —Ñ–∞–π–ª–æ–≤"""
    data_dir = Path(__file__).parent.parent / "data"
    apps_dir = data_dir / "apps"
    apps_data = []
    
    if not apps_dir.exists():
        print(f"‚ö†Ô∏è  –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {apps_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return []
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ JSON —Ñ–∞–π–ª—ã –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ apps
    for json_file in apps_dir.glob("*.json"):
        try:
            with open(json_file, 'r', encoding='utf-8') as f:
                app_data = json.load(f)
                apps_data.append(app_data)
                print(f"   üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: {json_file.name}")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {json_file.name}: {e}")
    
    return apps_data

def create_apps():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π"""
    db = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        categories = db.query(Category).all()
        category_map = {cat.name: cat.id for cat in categories}
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–æ–≤
        apps_data = load_apps_from_json()
        
        for app_data in apps_data:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if app_data["category_name"] not in category_map:
                print(f"   ‚ö†Ô∏è  –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{app_data['category_name']}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è '{app_data['name']}' (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º)")
                continue
                
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ö–µ—à–∞
            app = App(
                name=app_data["name"],
                description=app_data["description"],
                short_description=app_data["short_description"],
                company=app_data["company"],
                icon_url=app_data["icon_url"],
                header_image_url=app_data["header_image_url"],
                category_id=category_map[app_data["category_name"]],
                age_rating=app_data["age_rating"],
                apk_url=app_data["apk_url"],
                rating=app_data["rating"],
                file_size=app_data["file_size"],
                downloads=app_data["downloads"]
            )
            app_dict = HashUtils.get_data_for_hash(app)
            expected_hash = HashUtils.calculate_app_hash(app_dict)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å —Ç–∞–∫–∏–º —Ö–µ—à–µ–º
            existing_by_hash = db.query(App).filter(App.data_hash == expected_hash).first()
            if existing_by_hash:
                print(f"   ‚ö†Ô∏è  –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ '{app_data['name']}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º)")
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º, –Ω–æ —Å –¥—Ä—É–≥–∏–º —Ö–µ—à–µ–º
                existing_by_name = db.query(App).filter(App.name == app_data["name"]).first()
                if existing_by_name:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
                    existing_by_name.description = app_data["description"]
                    existing_by_name.short_description = app_data["short_description"]
                    existing_by_name.company = app_data["company"]
                    existing_by_name.icon_url = app_data["icon_url"]
                    existing_by_name.header_image_url = app_data["header_image_url"]
                    existing_by_name.category_id = category_map[app_data["category_name"]]
                    existing_by_name.age_rating = app_data["age_rating"]
                    existing_by_name.apk_url = app_data["apk_url"]
                    existing_by_name.rating = app_data["rating"]
                    existing_by_name.file_size = app_data["file_size"]
                    existing_by_name.downloads = app_data["downloads"]
                    existing_by_name.data_hash = expected_hash
                    
                    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã
                    db.query(Screenshot).filter(Screenshot.app_id == existing_by_name.id).delete()
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã
                    for i, screenshot_url in enumerate(app_data["screenshots"]):
                        screenshot = Screenshot(
                            app_id=existing_by_name.id,
                            image_url=screenshot_url,
                            order_index=i
                        )
                        db.add(screenshot)
                    
                    print(f"   üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: {app_data['name']}")
                else:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
                    app.data_hash = expected_hash  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ö–µ—à –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
                    
                    db.add(app)
                    db.flush()  # –ü–æ–ª—É—á–∞–µ–º ID –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç—ã
                    for i, screenshot_url in enumerate(app_data["screenshots"]):
                        screenshot = Screenshot(
                            app_id=app.id,
                            image_url=screenshot_url,
                            order_index=i
                        )
                        db.add(screenshot)
                    
                    print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: {app_data['name']}")
        
        db.commit()
        print("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω—ã")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π: {e}")
        db.rollback()
    finally:
        db.close()

def seed_database():
    """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    print("–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
    Base.metadata.create_all(bind=engine)
    print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã")
    
    # –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    create_categories()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    create_apps()
    
    print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞!")

if __name__ == "__main__":
    seed_database()
